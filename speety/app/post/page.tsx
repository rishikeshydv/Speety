/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/B2aerZGlup6
 */
"use client"
import React, { useState } from 'react';
import { CardTitle, CardDescription, CardHeader, CardContent, CardFooter, Card } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { SelectValue, SelectTrigger, SelectItem, SelectContent, Select } from "@/components/ui/select"
import { Button } from "@/components/ui/button"
import { collection, addDoc } from "firebase/firestore"; 
import { db } from "@/firebase/config";
import poppins from "@/font/font";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import getImageUrl from '@/queries/getImageUrl';
import getVideoUrl from '@/queries/getVideoUrl';
import { setDoc,getDoc,doc} from "firebase/firestore"; 
import { auth} from "@/firebase/config";
import { useAuthState } from "react-firebase-hooks/auth";
import { uuidv4 } from "@firebase/util";  


export default function PropertyPost() {
  const [price, setPrice] = useState('');
  const [beds, setBeds] = useState('');
  const [baths, setBaths] = useState('');
  const [houseType, setHouseType] = useState('');
  const [transaction, setTransaction] = useState('');
  const [address, setAddress] = useState('');
  const [apartment, setApartment] = useState('');
  const [city, setCity] = useState('');
  const [state, setState] = useState('');
  const [zip, setZip] = useState('');
  const [listing, setListing] = useState('');
  const [brokerId, setBrokerId] = useState("");
  const [imgList,setImgList]=useState<any>()
  const [imgUrlList,setImgUrlList]=useState<any>()
 const [vidList,setVidList]=useState<any>()
 const [vidUrlList,setVidUrlList]=useState<any>()

 const [user] = useAuthState(auth);
 const _uniqueId = uuidv4()

 
 async function imageUrlListCreator(imageList:any){
  if (imageList) {
    for (let i = 0; i < imageList.length; i++) {
        const imageUrl = await getImageUrl(imageList[i]);
        imgUrlList.push(imageUrl);
    }
  }
 }
 async function videoUrlListCreator(videoList:any){
  if (videoList) {
    for (let i = 0; i < videoList.length; i++) {
        const vidUrl = await getVideoUrl(videoList[i]);
        vidUrlList.push(vidUrl);
    }
  }
 }
    async function postDB() {
        // await addDoc(collection(db, "propertyDetails",user?.email as string), {
        //   [`${_uniqueId}`]: {
        //     price: price,
        //     beds: beds,
        //     baths: baths,
        //     houseType: houseType,
        //     transactionType: transaction,
        //     address: address,
        //     apartment: apartment,
        //     city: city,
        //     state: state,
        //     zip: zip,
        //     listedBy: listing,
        //     brokerId:brokerId,
        //     imageUrl: imgList,
        //     videoUrl:vidList
        //   }
        //  }); 

        const receiverRef = collection(db, "propertyDetails");
        const receiverDocRef =  doc(receiverRef, user?.email as string);
        const receiverSnapshot = await getDoc(receiverDocRef);
        if(!receiverSnapshot.exists()){
          await setDoc( receiverDocRef, {
              // If the document doesn't exist, create a new one
            [`${_uniqueId}`]: {
            price: price,
            beds: beds,
            baths: baths,
            houseType: houseType,
            transactionType: transaction,
            address: address,
            apartment: apartment,
            city: city,
            state: state,
            zip: zip,
            listedBy: listing,
            brokerId:brokerId,
            imageUrl: imgList,
            videoUrl:vidList
            }
            });
        }
    }

  return (
    <div className={poppins.className}>
      <Header />
    <Card className={`py-10 px-20 text-3xl`}>
      <CardHeader>
        <CardTitle>Property information</CardTitle>
        <CardDescription className="text-xl">Enter the details of the property you&apos;re listing.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid md:grid-cols-2 gap-4">
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="price">Price</Label>
            <Input id="price" placeholder="$" type="number" value={price} onChange={(e) => setPrice(e.target.value)}/>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="beds">Beds</Label>
            <Input id="beds" placeholder="Beds" type="number" value={beds} onChange={(e) => setBeds(e.target.value)}/>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="baths">Baths</Label>
            <Input id="baths" placeholder="Baths" type="number" value={baths} onChange={(e) => setBaths(e.target.value)}/>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="type">Type</Label>
            <Select>
              <SelectTrigger id="type">
                <SelectValue placeholder="Select" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Houses" onClick={() => setHouseType("Houses")}>Houses</SelectItem>
                <SelectItem value="Apartments" onClick={() => setHouseType("Apartments")}>Apartments</SelectItem>
                <SelectItem value="Townhouses" onClick={() => setHouseType("Townhomes")}>Townhomes</SelectItem>
                <SelectItem value="Condos/Co-ops" onClick={() => setHouseType("Condos/Co-ops")}>Condos/Co-ops</SelectItem>
                <SelectItem value="Multi-family" onClick={() => setHouseType("Multi-family")}>Multi-family</SelectItem>
                <SelectItem value="Lots/Land" onClick={() => setHouseType("Lots/Land")}>Lots/Land</SelectItem>
                <SelectItem value="Manufactured" onClick={() => setHouseType("Manufactured")}>Manufactured</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="transaction">Transaction</Label>
            <Select>
              <SelectTrigger id="transaction">
                <SelectValue placeholder="Select" />
              </SelectTrigger>
              <SelectContent>
              <SelectItem value="Buy" onClick={() => setTransaction("Buy")}>For Buy</SelectItem>
                <SelectItem value="Rent" onClick={() => setTransaction("Rent")}>For Rent</SelectItem>
                <SelectItem value="Sell" onClick={() => setTransaction("Sale")}>For Sale</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
        <div className="flex flex-col space-y-1.5">
          <Label htmlFor="address">Address</Label>
          <Input id="address" placeholder="123 Main St" value={address} onChange={(e) => setAddress(e.target.value)}/>
        </div>
        <div className="flex flex-col space-y-1.5">
          <Label htmlFor="apartment">Apartment, suite, etc.</Label>
          <Input id="apartment" placeholder="Apartment, suite, etc." value={apartment} onChange={(e) => setApartment(e.target.value)}/>
        </div>
        <div className="grid md:grid-cols-2 gap-4">
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="city">City</Label>
            <Input id="city" placeholder="City" value={city} onChange={(e) => setCity(e.target.value)}/>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="state">State</Label>
            <Input id="state" placeholder="State" value={state} onChange={(e) => setState(e.target.value)}/>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="zip">ZIP code</Label>
            <Input id="zip" placeholder="ZIP code" value={zip} onChange={(e) => setZip(e.target.value)}/>
          </div>
        </div>
        <div className="flex flex-col space-y-1.5">
          <Label htmlFor="listing">Listed by</Label>
          <Input id="listing" placeholder="Person or agency listing the property" value={listing} onChange={(e) => setListing(e.target.value)}/>
        </div>
        <div className="flex flex-col space-y-1.5">
          <Label htmlFor="listing">Broker ID</Label>
          <Input id="listing" placeholder="Agent or Broker ID" value={brokerId} onChange={(e) => setBrokerId(e.target.value)}/>
        </div>

        <div className="grid md:grid-cols-2 gap-4">
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="images">Upload Images</Label>
            <Input accept="image/*" id="images" type="file" multiple 
            onChange={(e) => 
              setImgList(e.target.files)}/>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="videos">Upload Videos</Label>
            <Input accept="video/*" id="videos" type="file" multiple 
            onChange={(e) => 
              setVidList(e.target.files)}/>
          </div>
        </div>
      </CardContent>
      <CardFooter>
        <Button size="sm" onClick={()=>{imageUrlListCreator(imgList)
        .then(()=>videoUrlListCreator(vidList))
        .then(()=>postDB)}}>Save</Button>
      </CardFooter>
    </Card>
    <Footer />
    </div>
  )
}
