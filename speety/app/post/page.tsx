/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/B2aerZGlup6
 */
"use client"
import React, { useState, useEffect } from 'react';
import { CardTitle, CardDescription, CardHeader, CardContent, CardFooter, Card } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { SelectValue, SelectTrigger, SelectItem, SelectContent, Select } from "@/components/ui/select"
import { Button } from "@/components/ui/button"
import { collection, addDoc, updateDoc } from "firebase/firestore"; 
import { db } from "@/firebase/config";
import poppins from "@/font/font";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import getImageUrl from '@/queries/ImgVidUrls/getImageUrl';
import getVideoUrl from '@/queries/ImgVidUrls/getVideoUrl';
import { setDoc,getDoc,doc} from "firebase/firestore"; 
import { auth} from "@/firebase/config";
import { useAuthState } from "react-firebase-hooks/auth";
import { uuidv4 } from "@firebase/util";  
import { useRouter } from 'next/navigation';

export default function PropertyPost() {
  const router = useRouter();
  const [price, setPrice] = useState('');
  const [beds, setBeds] = useState('');
  const [baths, setBaths] = useState('');
  const [houseType, setHouseType] = useState('');
  const [transaction, setTransaction] = useState('');
  const [address, setAddress] = useState('');
  const [apartment, setApartment] = useState('');
  const [city, setCity] = useState('');
  const [state, setState] = useState('');
  const [zip, setZip] = useState('');
  const [listing, setListing] = useState('');
  const [brokerId, setBrokerId] = useState("");
  const [imgList,setImgList]=useState<File[]>([])
  const [imgUrlList,setImgUrlList]=useState<string []>([])
 const [vidList,setVidList]=useState<File[]>([])
 const [vidUrlList,setVidUrlList]=useState<string []>([])
 const [date, setDate] = useState("");

 const [user] = useAuthState(auth);
 const _uniqueId = uuidv4()
 if (!user) {
   router.push("/auth/login");
   return <div>Not authorized</div>;
 }

//storing all the image files
  const handleImageChange = (event:any) => {
    const files = event.target.files; // Get the selected files
    if (!files) return;
    // Loop through the selected files and add them to the newFiles array
    for (let i = 0; i < files.length; i++) {
      imgList.push(files[i]);
    }
    // Update the state with the newFiles array
    setImgList(imgList);
  };

  //storing all the video files
  const handleVideoChange = (event:any) => { 
    const files = event.target.files; // Get the selected files
    if (!files) return;
    // Loop through the selected files and add them to the newFiles array
    for (let i = 0; i < files.length; i++) {
      vidList.push(files[i]);
    }
    // Update the state with the newFiles array
    setVidList(vidList);
  }

  //create image URL list

  const imageUrlListCreator = (imageList:any) => {    
    if (!imageList){
      return;
    }

    return new Promise((resolve, reject) => {
      for (let i = 0; i < imageList.length; i++) {
        getImageUrl(imageList[i])
          .then((downloadURL) => {
            imgUrlList.push(downloadURL.toString());
            resolve(downloadURL);
          })
          .catch((error) => {
            reject(error);
          });
      }
   }
    ); 
  }

//create video URL list

  const videoUrlListCreator = (videoList:any) => {
    if (!videoList){
      return;
    }
    return new Promise((resolve, reject) => {
      for (let i = 0; i < videoList.length; i++) {
        getVideoUrl(videoList[i])
          .then((downloadURL) => {
            vidUrlList.push(downloadURL.toString());
            resolve(downloadURL);
          })
          .catch((error) => {
            reject(error);
          });
      }
    }
  )}


  async function postDB() {
        const receiverRef = collection(db, "presentListings");
        const receiverDocRef =  doc(receiverRef, user?.email as string);
        const receiverSnapshot = await getDoc(receiverDocRef);
        if(!receiverSnapshot.exists()){
          await setDoc( receiverDocRef, {
              // If the document doesn't exist, create a new one
              //each property to have a unique id
              //so when we have to assign a property to an agent, we can just assign him the unique id
              //instead of the whole property details
              //this makes it easy while querying
            [`${_uniqueId}`]: {
            price: price,
            beds: beds,
            baths: baths,
            houseType: houseType,
            transactionType: transaction,
            address: address,
            apartment: apartment,
            city: city,
            state: state,
            zip: zip,
            listedBy: listing,
            brokerId:brokerId,
            imageUrl: imgUrlList,
            videoUrl:vidUrlList,
            date:date
            } 
            });
          router.push('/post/successful');
        }
        else{
          await updateDoc( receiverDocRef, {
            // If the document already exists, update it
            [`${_uniqueId}`]: {
            price: price,
            beds: beds,
            baths: baths,
            houseType: houseType,
            transactionType: transaction,
            address: address,
            apartment: apartment,
            city: city,
            state: state,
            zip: zip,
            listedBy: listing,
            brokerId:brokerId,
            imageUrl: imgUrlList,
            videoUrl:vidUrlList
            }
            });
            router.push('/post/successful');
        }
        console.log("Document written with ID: ", receiverDocRef.id);
    }

  return (
    <div className={poppins.className}>
      <Header />
    <Card className={`py-10 px-40`}>
      <CardHeader>
        <CardTitle className='text-4xl'>Property information</CardTitle>
        <CardDescription className="text-xl">Enter the details of the property you&apos;re listing.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid md:grid-cols-2 gap-4">
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="price" className='text-2xl'>Price</Label>
            <Input id="price" className='text-2xl border-2' placeholder="$" type="number" value={price} onChange={(e) => setPrice(e.target.value)}/>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="beds" className='text-2xl'>Beds</Label>
            <Input id="beds" className='text-2xl border-2' placeholder="Beds" type="number" value={beds} onChange={(e) => setBeds(e.target.value)}/>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="baths" className='text-2xl'>Baths</Label>
            <Input id="baths" placeholder="Baths" className='text-2xl border-2' type="number" value={baths} onChange={(e) => setBaths(e.target.value)}/>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="type" className='text-2xl'>Type</Label>
            <Select  onValueChange={(value) => setHouseType(value)}>
              <SelectTrigger id="type" className='text-2xl border-2'>
                <SelectValue placeholder="Select"/>
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Houses" >Houses</SelectItem>
                <SelectItem value="Apartments" >Apartments</SelectItem>
                <SelectItem value="Townhouses" >Townhomes</SelectItem>
                <SelectItem value="Condos/Co-ops" >Condos/Co-ops</SelectItem>
                <SelectItem value="Multi-family" >Multi-family</SelectItem>
                <SelectItem value="Lots/Land" >Lots/Land</SelectItem>
                <SelectItem value="Manufactured" >Manufactured</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="transaction" className='text-2xl'>Transaction</Label>
            <Select onValueChange={(value) => setTransaction(value)}
            >
              <SelectTrigger id="transaction" className='text-2xl border-2'>
                <SelectValue placeholder="Select" />
              </SelectTrigger>
              <SelectContent>
              <SelectItem value="Buy">For Buy</SelectItem>
                <SelectItem value="Rent">For Rent</SelectItem>
                <SelectItem value="Sell">For Sale</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
        <div className="flex flex-col space-y-1.5">
          <Label htmlFor="address" className='text-2xl'>Address</Label>
          <Input id="address" placeholder="123 Main St" className='text-2xl border-2' value={address} onChange={(e) => setAddress(e.target.value)}/>
        </div>
        <div className="flex flex-col space-y-1.5">
          <Label htmlFor="apartment" className='text-2xl'>Apartment, suite, etc.</Label>
          <Input id="apartment" className='text-2xl border-2' placeholder="Apartment, suite, etc." value={apartment} onChange={(e) => setApartment(e.target.value)}/>
        </div>
        <div className="grid md:grid-cols-2 gap-4">
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="city" className='text-2xl'>City</Label>
            <Input id="city" className='text-2xl border-2' placeholder="City" value={city} onChange={(e) => setCity(e.target.value)}/>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="state" className='text-2xl'>State</Label>
            <Input id="state" className='text-2xl border-2' placeholder="State" value={state} onChange={(e) => setState(e.target.value)}/>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="zip"className='text-2xl'>ZIP code</Label>
            <Input id="zip" className='text-2xl border-2' placeholder="ZIP code" value={zip} onChange={(e) => setZip(e.target.value)}/>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="date"className='text-2xl'>Date</Label>
            <Input id="date" className='text-2xl border-2' placeholder="YYYY-MM-DD" value={date} onChange={(e) => setDate(e.target.value)}/>
          </div>
        </div>
        <div className="flex flex-col space-y-1.5">
          <Label htmlFor="listing" className='text-2xl'>Listed by</Label>
          <Input id="listing" className='text-2xl border-2' placeholder="Person or agency listing the property" value={listing} onChange={(e) => setListing(e.target.value)}/>
        </div>
        <div className="flex flex-col space-y-1.5">
          <Label htmlFor="listing" className='text-2xl'>Broker ID</Label>
          <Input id="listing" className='text-2xl border-2' placeholder="Agent or Broker ID" value={brokerId} onChange={(e) => setBrokerId(e.target.value)}/>
        </div>

        <div className="grid md:grid-cols-2 gap-4">
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="images" className='text-2xl'>Upload Images</Label>
            <Input accept="image/*" className='text-lg border-2' id="images" type="file" multiple 
            onChange={(e)=>
              {
                handleImageChange(e);
                imageUrlListCreator(imgList);
                }}/>
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="videos" className='text-2xl'>Upload Videos</Label>
            <Input accept="video/*" className='text-lg border-2' id="videos" type="file" multiple 
            onChange={(e)=>
            {
              handleVideoChange(e);
              videoUrlListCreator(vidList);
              }}/>
          </div>
        </div>
      </CardContent>
      <CardFooter className='flex items-center justify-center'>
        <Button size="lg" className='text-2xl'
         onClick={()=>{ 
          postDB();
    }
      }
        >
  
          Save</Button>
      </CardFooter>
    </Card>
    <Footer />
    </div>
  )
}
