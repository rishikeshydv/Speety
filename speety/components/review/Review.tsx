/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/WZXqkV8hxU3
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Button } from "@/components/ui/button"
import React, { useState, useEffect } from "react"
import { collection,getDoc,doc,updateDoc, setDoc} from "firebase/firestore"; 
import { db } from "@/firebase/config";
import { uuidv4 } from "@firebase/util";  
import { format } from 'date-fns';
import moment from "moment"; //use moment.js to get time/date in a good format
interface ReviewProps {
  name: string
  reviewCompleteFunc: () => void
  agentEmail: string
}
const Review:React.FC<ReviewProps> = ({name,reviewCompleteFunc, agentEmail}) => {
  const [reviewName, setReviewName] = useState<string>("")
  const [reviewEmail, setReviewEmail] = useState<string>("")
  const [reviewRating, setReviewRating] = useState<number>(0)
  const [reviewContent, setReviewContent] = useState<string>("")
  const [starColor1, setStarColor1] = useState<string>("fill-muted stroke-muted-foreground")
  const [starColor2, setStarColor2] = useState<string>("fill-muted stroke-muted-foreground")
  const [starColor3, setStarColor3] = useState<string>("fill-muted stroke-muted-foreground")
  const [starColor4, setStarColor4] = useState<string>("fill-muted stroke-muted-foreground")
  const [starColor5, setStarColor5] = useState<string>("fill-muted stroke-muted-foreground")

  const _uniqueId = uuidv4()

  const starChange = (rating: number) => {
    setReviewRating(rating)
    if(rating === 1) {
      setStarColor1("fill-yellow-500 stroke-yellow-500")
      setStarColor2("fill-muted stroke-muted-foreground")
      setStarColor3("fill-muted stroke-muted-foreground")
      setStarColor4("fill-muted stroke-muted-foreground")
      setStarColor5("fill-muted stroke-muted-foreground")
    } else if(rating === 2) {
      setStarColor1("fill-yellow-500 stroke-yellow-500")
      setStarColor2("fill-yellow-500 stroke-yellow-500")
      setStarColor3("fill-muted stroke-muted-foreground")
      setStarColor4("fill-muted stroke-muted-foreground")
      setStarColor5("fill-muted stroke-muted-foreground")
    } else if(rating === 3) {
      setStarColor1("fill-yellow-500 stroke-yellow-500")
      setStarColor2("fill-yellow-500 stroke-yellow-500")
      setStarColor3("fill-yellow-500 stroke-yellow-500")
      setStarColor4("fill-muted stroke-muted-foreground")
      setStarColor5("fill-muted stroke-muted-foreground")
    } else if(rating === 4) {
      setStarColor1("fill-yellow-500 stroke-yellow-500")
      setStarColor2("fill-yellow-500 stroke-yellow-500")
      setStarColor3("fill-yellow-500 stroke-yellow-500")
      setStarColor4("fill-yellow-500 stroke-yellow-500")
      setStarColor5("fill-muted stroke-muted-foreground")
    } else if(rating === 5) {
      setStarColor1("fill-yellow-500 stroke-yellow-500")
      setStarColor2("fill-yellow-500 stroke-yellow-500")
      setStarColor3("fill-yellow-500 stroke-yellow-500")
      setStarColor4("fill-yellow-500 stroke-yellow-500")
      setStarColor5("fill-yellow-500 stroke-yellow-500")
    }
  }


  const [currentTime, setCurrentTime] = useState(moment());
  useEffect(() => {
    // Function to update the current time every second
    const updateCurrentTime = () => {
      setCurrentTime(moment());
    };

    // Set up an interval to update the time every second
    const intervalId = setInterval(updateCurrentTime, 1000);

    // Clean up the interval when the component unmounts
    return () => clearInterval(intervalId);
  }, []);

 async function submitReview(){
  const now = new Date();
  const formattedDate = format(now, 'yyyy-MM-dd');
  //updating agent's database
    const docRef = doc(db, "agentList", agentEmail);
    const docSnap = await getDoc(docRef);
    if(docSnap.exists()){
      const agentData = docSnap.data();
      agentData.reviews[_uniqueId] = [reviewEmail, reviewName, reviewRating, reviewContent,formattedDate]
      await updateDoc(docRef, agentData)
  }

  //pushing a notification
  const pushReviewNotification = async(senderEmail:string,receiverEmail:string) => {
    const receiverRef = collection(db, "notifications");
    const receiverDocRef =  doc(receiverRef, receiverEmail);
    const receiverSnapshot = await getDoc(receiverDocRef);
    if(!receiverSnapshot.exists()){
      await setDoc( receiverDocRef, {
          // If the document doesn't exist, create a new one
        [`${_uniqueId}`]: {
          age:"new",
          from:senderEmail,
          status:"pending",
          date:currentTime.format("YYYY-MM-DD"),
          type:"review",
          id:_uniqueId
        }
        });
    }
    else{
      // If the document exists, update its fields
      await updateDoc(receiverDocRef, {
        [`${_uniqueId}`]: {
          age:"new",
          from:senderEmail,
          status:"pending",
          date:currentTime.format("YYYY-MM-DD"),
          type:"review",
          id:_uniqueId
        }
      });
      }
  }


  //updating client's database
  const docRef_ = doc(db, "customerReviews", reviewEmail);
  const docSnap_ = await getDoc(docRef_);
  if (docSnap_.exists()) {
    const clientData = docSnap_.data();
    if (clientData) {
      clientData.reviews[_uniqueId] = [agentEmail, name, reviewRating, reviewContent, formattedDate];
      await updateDoc(docRef_, clientData);
    }
  } else {
    await setDoc(doc(db, "customerReviews",  reviewEmail), {
      reviews: {
        [_uniqueId]: [agentEmail, name, reviewRating, reviewContent, formattedDate],
      },
    });
  }

}
  
  return (
    <section className="bg-gray-100 py-12 dark:bg-gray-800">
      <div className="container mx-auto max-w-2xl px-4">
        <div className="space-y-4">
          <h2 className="text-4xl font-bold">Leave a Review</h2>
          <div className="flex">
          <h1 className="text-gray-500 dark:text-gray-400 tracking tighter">
            We&apos;d love to hear your thoughts! Share your experience with&nbsp;
          </h1>
          <p className="font-semibold tracking tighter">{name}</p>.
          </div>
          <form className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="name">Name</Label>
                <Input id="name" placeholder="Enter your name" onChange={(e)=>setReviewName(e.target.value)}/>
              </div>
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input id="email" placeholder="Enter your email" type="email" onChange={(e)=>setReviewEmail(e.target.value)}/>
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="rating">Rating</Label>
              <div className="flex items-center gap-2">
                {/* <StarIcon className="h-6 w-6 fill-primary" /> */}
                <StarIcon className={`h-6 w-6 ${starColor1}`} onClick={()=>{starChange(1); setReviewRating(1)}} />
                <StarIcon className={`h-6 w-6 ${starColor2}`} onClick={()=>{starChange(2); setReviewRating(2)}}/>
                <StarIcon className={`h-6 w-6 ${starColor3}`} onClick={()=>{starChange(3);setReviewRating(3)}}/>
                <StarIcon className={`h-6 w-6 ${starColor4}`} onClick={()=>{starChange(4);setReviewRating(4)}}/>
                <StarIcon className={`h-6 w-6 ${starColor5}`} onClick={()=>{starChange(5);setReviewRating(5)}}/>
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="review">Review</Label>
              <Textarea className="min-h-[120px]" id="review" placeholder="Share your thoughts..." onChange={(e)=>setReviewContent(e.target.value)}/>
            </div>
            <Button className="w-full" onClick={()=>{
              submitReview();
              reviewCompleteFunc() 
            }}>
              Submit Review
            </Button>
          </form>
        </div>
      </div>
    </section>
  )
}

export default Review

function StarIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
    </svg>
  )
}
